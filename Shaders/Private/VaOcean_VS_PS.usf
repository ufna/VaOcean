// Created 2014-2016 Vladimir Alyamkin. MIT license .

#include "/Engine/Private/Common.ush"


//////////////////////////////////////////////////////////////////////////
// Vertex shaders

void QuadVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 InTexCoord : ATTRIBUTE1,
	out float2 OutTexCoord : TEXCOORD0,
	out float4 OutPosition : SV_POSITION)
{
	OutPosition = InPosition;
	OutTexCoord.x = 0.5f + InPosition.x * 0.5f;
	OutTexCoord.y = 0.5f - InPosition.y * 0.5f;
}


//////////////////////////////////////////////////////////////////////////
// Pixel shaders

// Immutable
uint g_ActualDim;
uint g_InWidth;
uint g_OutWidth;
uint g_OutHeight;
uint g_DtxAddressOffset;
uint g_DtyAddressOffset;

// The following three should contains only real numbers. But we have only C2C FFT now.
StructuredBuffer<float2> g_InputDxyz;

// Post-FFT data wrap up: Dx, Dy, Dz -> Displacement
void UpdateDisplacementPS(float2 UV : TEXCOORD0, out float4 OutColor : SV_Target0)
{
	uint index_x = (uint)(UV.x * (float)g_OutWidth);
	uint index_y = (uint)(UV.y * (float)g_OutHeight);
	uint addr = g_OutWidth * index_y + index_x;

	// cos(pi * (m1 + m2))
	int sign_correction = ((index_x + index_y) & 1) ? -1 : 1;

	float dx = g_InputDxyz[addr + g_DtxAddressOffset].x * sign_correction * PerFrameDisp.ChoppyScale;
	float dy = g_InputDxyz[addr + g_DtyAddressOffset].x * sign_correction * PerFrameDisp.ChoppyScale;
	float dz = g_InputDxyz[addr].x * sign_correction;

	OutColor = float4(dx, dy, dz, 1);
}


// Textures and sampling states
Texture2D 		DisplacementMap;
SamplerState 	DisplacementMapSampler;

// Displacement -> Normal, Folding
void GenGradientFoldingPS(float2 UV : TEXCOORD0, out float4 OutColor : SV_Target0)
{
	// Sample neighbour texels
	float2 one_texel = float2(1.0f / (float)g_OutWidth, 1.0f / (float)g_OutHeight);

	float2 tc_left  = float2(UV.x - one_texel.x, UV.y);
	float2 tc_right = float2(UV.x + one_texel.x, UV.y);
	float2 tc_back  = float2(UV.x, UV.y - one_texel.y);
	float2 tc_front = float2(UV.x, UV.y + one_texel.y);

	float3 displace_left  = DisplacementMap.Sample(DisplacementMapSampler, tc_left).xyz;
	float3 displace_right = DisplacementMap.Sample(DisplacementMapSampler, tc_right).xyz;
	float3 displace_back  = DisplacementMap.Sample(DisplacementMapSampler, tc_back).xyz;
	float3 displace_front = DisplacementMap.Sample(DisplacementMapSampler, tc_front).xyz;
	
	// Do not store the actual normal value. Using gradient instead, which preserves two differential values.
	float2 gradient = {-(displace_right.z - displace_left.z), -(displace_front.z - displace_back.z)};
	

	// Calculate Jacobian corelation from the partial differential of height field
	float2 Dx = (displace_right.xy - displace_left.xy) * PerFrameDisp.ChoppyScale * PerFrameDisp.GridLen;
	float2 Dy = (displace_front.xy - displace_back.xy) * PerFrameDisp.ChoppyScale * PerFrameDisp.GridLen;
	float J = (1.0f + Dx.x) * (1.0f + Dy.y) - Dx.y * Dy.x;

	// Practical subsurface scale calculation: max[0, (1 - J) + Amplitude * (2 * Coverage - 1)].
	float fold = max(1.0f - J, 0);

	// Output
	OutColor = float4(gradient, 0, fold);
}
